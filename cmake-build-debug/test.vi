function inc(x, y) : {
    a = {1, 2, 3, 4};
    return x + y * a[3];
}

function concat(string1, string2) : {
    resultString = string1 + string2;
    return resultString;
}

function non_argument_function() : {
    return "this is the returned value of non-arugment function. it is looks like";
}

function non_returned_function(x) : {
    x = x + 1;
    "so, this is the function that not returning any values";
}

a = {1, {"this is an", "array"}, 3, 4};
b = a;
F = b[1][1 - a[0]][0];
b[1][a[0]] = "change it";
b;
a;
c = a[1][0];
c = c + " succesfully";
a;
formula = 2.0 + pi;
formula = (3 + pi + formula) + formula;
string = "hello " + "world";
string + "!!!\n";
formula;
(-pi) * 3.14;
formula = formula - 1;
formula = formula - 1;
formula = formula - 1;
"hello"+"world";
newPi = pi;
newPi = newPi - 1;
newPi;
pi;
a = {1, {3, 4, {pi}}, 5};
a;
array = {3, 2, 1};
arrayB = {1, array, 2};
ff = {1, {3}, 5};
ff[1] = "slipknot";
ff;
SLIPKNOT = "SLIPKNOT = " + ff[1][0] + ff[1][5];
a = {1, 2 + 3, 3};
b = {2.7, 3.14, 0.0};
a[1] = b;
a;
b[0] = "hello world!";
a;
b = 123;
a;
level1 = {2, 3, 4}; level2 = {5, 6, 7};
TEST = {1, {level1, {level2}}};
TEST;
level1 = {3, 2, 5}; level2[0] = "hello"[0]; level2[a[0]] = "----------------"; level2[2] = "world"[1];
TEST;
level1;
3 * a[0] - 3.14;
CONSTANTTEST = -1 + (-(2 - 5)) / 3.14;
CONSTANTTEST * a[0] + level1[2];

a = {};
a[] = {3, 4, 5};
a[0][] = "hello world"[4, 7];
a;

b = {1, 2, 3};
b[] = a;
b;
a[0][0] = 3.14;
a;
b;
v = {"h", "b", "c"};
b[] = v;
b; v[1] = 2.7;
b;
a = {
        {},
        {},
        {},
        {}
};
a[0][] = {1, "A"};
a[1][] = {2, "B"};
a[2][] = {3, "C"};
a[3][] = {4, "D"};
a;
v = a[1,2];
v;
a[1][0][0] = 3.14;
v;
TEST2 = {
        {3},
        {5},
        {4},
        {6}
};
TMP = TEST2[0,2];
TMP[0];
TEST2;
b = {3};
a = {1, 2, b, 4, 5};
a[0, 3];
b[] = 3.14;
a[0, 3];
"hello world"[0, 8, 4];
a = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
a[0, 9, 3];
a = {"B" => a, "C" => {"D" => "Hello world"}};
a["C"]["D"];
a["B"][0] = 3.14;
a;
a["B"][0, 9, 3];

x = 3.14;
x = inc(inc(inc(x, -2.7), inc(x, 2.7)), x * x);
f = inc(x, 1.0 - x);
ConcatResult = concat("ConcatResult: ", concat("hello ", "world!"));
concat("hello, "[(-1+1), 2], "goodbye"[0, 3]);

NOARG = non_argument_function();
NOARG;
NORET = non_returned_function(1);
NORET;

function get_array(x) : {
    r = {x + 1, x +  2, x + 3};
    return r;
}
a = get_array(3.14);
a;
function change_array(array) : {
    array[0] = array[0] - 1;
    array[1] = array[1] - 1;
    array[2] = array[2] - 1;
}

array = {1, 2, 3, 4};
change_array(array);
array;

A = {1, 2}; B = {3, 4};
function append_with_return(A, B) : {
    A[] = B;
    return A;
}

function append_not_return(A, B) : {
    r = {"hello world", "this is local variale R"};
    B[1] = r;
    A[] = B;
}

append_with_return(A, B); A;
C = {1, 2, 3};
append_not_return(A[2], C); A;

function t(A) : {
    F = A;
    return A;
}

a = {1, 2, 3};
t(a);
a;

function t(A) : {
    F = {"another", "pointer"};
    F = A;
return A;
}

a = {3, 4, 5}; t(a);
a  = a[0];
a = {{1, 2}, 2, 3};
a = a[0];
a;
function get_string(x) : {
    A = {x + 1, x + 2, x + 3, x + 4};
    return A;
}
D = get_string(pi);
D[0] = {3.14};
c = D; c = c[0, 3, 2];
c;

function foo(x) : {
    return x;
}

"first function:"; foo(pi);

function foo(y) : {
    return y * y;
}

"second function:"; foo(pi);

function f(x) : {
    return x;
}

function f() : {
    return 3.14;
}
f(f() + 3);

function f() : {
    return 3.14 * 1000;
}

function f(x) : {
    return x / 4;
}
f(f() + 3);

function foo(x)  : {
    return x;
}

function foo() : {
    return 3.14;
}

function foo(x, y, z) : {
    return  1 / (x + y + z);
}

foo();
foo(foo());
foo(foo(),
        foo(foo()),
        foo(1, 2, 3));

fpointer = foo;

fpointer();
fpointer(fpointer());
fpointer(fpointer(),
        fpointer(fpointer()),
        fpointer(1, 2, 3));

function F(x, y) : {
    return x + y;
}
A = {foo};
A[0](3, 6, F(foo(), foo()));

function get_pointer(pointer) : {
    "the function will return a pointer to another function";
    return pointer;
}

get_pointer(foo)(get_pointer(foo)(), get_pointer(foo)(2.7), get_pointer(foo)(1, 2, 3));
pointers = {get_pointer(foo), get_pointer(F), get_pointer(inc)};
pointers[0](pointers[1](pointers[0](), pointers[0]()));

function f(x) : {
    return pi + x;
}

function f(x, y) : {
    return pi / (x + y);
}

function foo() : {
    return f(pi);
}

function foo(x) : {
    x = pi ^ 2;
    return f(x, 2);
}

foo(1); pi;

A = {1, 2, 3, 4, 5};
function add(x) : {
    A[] = foo(x);
}
add(foo());
A;

function add_by_arg(x) : {
    x[] = "new value";
}
add_by_arg(A); A;

function get_function_pointer(function_pointer) : {
    return foo;
}
X = get_function_pointer(foo)(2.6); X;

function add_by_arg_return(x) : {
    x[] = "new value by return";
    return x;
}
A = add_by_arg_return(A); A;

function add_ret(x) : {
    A[] = x;
    return A;
}
A = add_ret({"hello world" => foo(777)});
A;

namespace CustomNameSpace : {
    function f() : {
        return "im a pointer";
    }

    function get_name() : {
        return f;
    }
    __id__ = 123;
    array = {1, 2, 3, 4};
    namespace innerSpace : {
        __id__ = 123;
    }
}
CustomNameSpace->innerSpace->__name__[0];
CustomNameSpace->__name__;
CustomNameSpace->get_name()();

namespace CustomNameSpace : {
    a = {1, 2, 3};
    b = 2;
    c = 3;
}
a = CustomNameSpace->a;

namespace CustomNameSpace : {
    a = 0;
    b = 0;
    c = 0;
}
a;
CustomNameSpace->a;

__name__ = "GLOBAL";

namespace A : {
    function f() : {
        return __name__;
    }
}

namespace B : {
    function f() : {
        return __name__;
    }
}
A->f();
B->f();

namespace B : {
    pi = {3.14};
}
B->pi;
f();

function B f() : {
    return __name__;
}
f();

function create_namespace(name) : {
    namespace generic : {
        function f() : {
            return __name__;
        }
        string = "hello";
        float = 3.14;
        int = 3;
        fp = f;
        array = {string, float, int, fp, 1, 2, 3};
    }
    return generic;
}
A = create_namespace("new");
A->array[3]();

function A f() : {
    return array;
}

function foo() : {
    return A->__name__;
}

f()[3]();
foo();

namespace A : {
    "Custom namespace for function";
    pi = 3.14; g = 9.8; e = 2.7;
};

function A foo() : {
    function f(x) : {
        return x;
    }

    function f(x, y) : {
        return 1 + (x / y);
    }

    function f(x, y, z) : {
        return x ^ z + 2 * x * y - y ^ z;
    }
    f1 = f(pi); f2 = f(f1, g); f3 = f(f1, f2, e);
    return f1 + f2 + f3;
}

foo();